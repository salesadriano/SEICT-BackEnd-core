openapi: 3.0.3
info:
  title: Lampp-IT - Core - OpenAPI 3.0
  description: |-
    OAS Spec for Core component.
  termsOfService: http://lampp-it.com.br/api/terms/
  contact:
    email: core=api@lampp-it.com.br
  license:
    name: Lampp-IT License
    url: http://lampp-it.com.br/api/license/
  version: 1.0.0
servers:
  - url: "{protocol}://{devServerHost}:{devServerPort}/api/core/v1"
    description: development instance
    variables:
      protocol:
        description: a
        default: https
        enum:
          - https
          - http
      devServerHost:
        description: host name of the development server
        default: localhost
        enum:
          - localhost
          # add other hosts here
      devServerPort:
        description: host port of the api service is running
        default: "8080"
        enum:
          - "8080"
          # add other ports here
tags:
  - name: User
    description: Operations on User.
paths:
  /users:
    get:
      tags:
        - User
      summary: Search an User by its id.
      description: Given an id, Then search the Resource associated with it.
      operationId: one
      parameters:
        - name: id
          in: path
          description: The value of the id property of the Resource.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "415":
          $ref: '#/components/responses/UnsupportedMediaTypeError'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - coreStore_auth:
            - read:users
    post:
      tags:
        - User
      summary: Create an new User.
      description: Given the representation of an new User, Then persist it.
      operationId: newEntity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad Request - Invalid representation supplied.
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "409":
          description: Conflict.
        "415":
          description: Unsupported Media Type.
        "500":
          description: Internal Server error.
      security:
        - coreStore_auth:
            - write:users
            - read:users
    put:
      tags:
        - User
      summary: Update an existent User.
      description: Given the new representation of an existent User, Then persist it.
      operationId: replaceEntity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad Request - Invalid representation supplied.
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "404":
          description: Resource with id could not be found.
        "415":
          description: Unsupported Media Type.
        "428":
          description: Precondition failed. #locking (pessimistic|optimistic).
        "500":
          description: Internal Server error.
      security:
        - coreStore_auth:
            - write:users
            - read:users
    delete:
      tags:
        - User
      summary: Delete an existent User.
      description: Given an id, Then search the Resource associated with it.
      operationId: deleteEntity
      parameters:
        - name: id
          in: path
          description: The value of the id property of the Resource.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad Request - Invalid id supplied.
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "404":
          description: Resource with id could not be found.
        "415":
          description: Unsupported Media Type.
        "428":
          description: Precondition failed. #locking (pessimistic|optimistic).
        "500":
          description: Internal Server error.
      security:
        - coreStore_auth:
            - read:users
            - write:users
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        password:
          type: string
          format: password
          example: "12345"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/UserRole"
    UserRole:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        authority:
          type: string
          example: theAuthority
    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the problem type.  When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: 'about:blank'
          example: 'https://zalando.github.io/problem/constraint-violation'
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: |
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: |
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.
  responses:
    BadRequestError:
      description: Bad Request - Invalid data supplied.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            {
              "type": "https://zalando.github.io/problem/constraint-violation",
              "title": "Constraint Violation",
              "status": 400,
              "violations": [
                  {
                      "field": "user.username",
                      "message": "may not be empty."
                  },
                  {
                      "field": "roles",
                      "message": "must not contain duplicates."
                  },
                  {
                      "field": "roles[0].authority",
                      "message": "not supported."
                  }
              ]
          }
    UnauthorizedError:
      description: Unauthorized.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    ForbiddenError:
      description: Forbidden.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    NotFoundError:
      description: Resource with id could not be found.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    UnsupportedMediaTypeError:
      description: Unsupported Media Type.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    InternalServerError:
      description: Internal Server error.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'

  # securitySchemes:
  #   coreStore_auth:
  #     type: oauth2
  #     flows:
  #       implicit:
  #         authorizationUrl: https://petstore3.swagger.io/oauth/authorize
  #         scopes:
  #           read:users: Read User data.
  #           write:users: Modify User data.
  #   api_key:
  #     type: apiKey
  #     name: api_key
  #     in: header
